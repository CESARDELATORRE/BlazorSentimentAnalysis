#pragma checksum "D:\GitRepos\BlazorSentimentAnalysis\BlazorSentimentAnalysis.Client\Pages\Review.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dc2264df870f5d2cc59b9eb4aa665ab3a7ef6219"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorSentimentAnalysis.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using BlazorSentimentAnalysis.Client;
    using BlazorSentimentAnalysis.Client.Shared;
    [Microsoft.AspNetCore.Components.Layouts.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public class Review : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 20 "D:\GitRepos\BlazorSentimentAnalysis\BlazorSentimentAnalysis.Client\Pages\Review.razor"
            
    float happiness = 50; // 0=worst, 100=best
    string tweetText = string.Empty; //280 characters is maximum length for the tweet text

    async void UpdateScoreAsync(UIChangeEventArgs evt)
    {
        string targetText = (string)evt.Value;

        //Make a real call to Sentiment service
        happiness = await PredictSentimentAsync(targetText);

        // See issue https://github.com/aspnet/Blazor/issues/519.  This is needed otherwise the binding to happiness isn't updated after the async call for prediction.
        StateHasChanged();

        string liveSamplesUrl = "https://aka.ms/mlnet-live-samples";
        tweetText = $"I just tried this live ML.NET and Blazor sample for Sentiment Analysis. It was fun! Try it yourself and grab the code!: {liveSamplesUrl} #mlnet #machinelearning #dotnetcore";
        //tweetText = $"I just tested this live ML.NET sample for Sentiment Analysis: Text << {targetText} >> was predicted as {happiness}% positive sentiment. Try it by yourself here!: {liveSamplesUrl}";

    }

    private async Task<float> PredictSentimentAsync(string targetText)
    {
        string url = $"api/Sentiment/sentimentprediction?sentimentText={targetText}";

        float percentage = await Http.GetJsonAsync<float>(url);

        return percentage;
    }

    // Sample test without ML.NET model
    //
    //void UpdateScore(UIChangeEventArgs evt)
    //{
    //    string targetText = (string)evt.Value;

    //    //Random percentage
    //    Random random = new Random();
    //    happiness = random.Next(0, 100);
    //}

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591

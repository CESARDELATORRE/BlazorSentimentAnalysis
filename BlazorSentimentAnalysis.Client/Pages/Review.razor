@page "/"
@inject HttpClient Http

<p><textarea oninput=@UpdateScoreAsync cols="45" placeholder="Type any text like a short product review"></textarea></p>

<HappinessScale Value=@happiness />

<br>
<br>
<br>
<br>

<a class="twitter-share-button"
   href="https://twitter.com/intent/tweet?text=@tweetText"
   data-size="large" 
   target="_blank">
    <img alt="Share on Twitter" src="~/images/Twitter_Logo_Blue.svg" height="40" />
</a>

@functions {
    float happiness = 50; // 0=worst, 100=best
    string tweetText = "I used #mldotnet for real-time sentiment analysis! Try out machine learning for .NET at dot.net/ml"; //280 characters is maximum length for the tweet text

    async void UpdateScoreAsync(UIChangeEventArgs evt)
    {
        string targetText = (string)evt.Value;

        //Make a real call to Sentiment service
        happiness = await PredictSentimentAsync(targetText);

        // See issue https://github.com/aspnet/Blazor/issues/519.  This is needed otherwise the binding to happiness isn't updated after the async call for prediction.
        StateHasChanged();

        // string liveSamplesUrl = "https://aka.ms/mlnet-live-samples";
        //tweetText = $"I just tested this live ML.NET sample for Sentiment Analysis: Text << {targetText} >> was predicted as {happiness}% positive sentiment. Try it by yourself here!: {liveSamplesUrl}";

    }

    private async Task<float> PredictSentimentAsync(string targetText)
    {
        string url = $"api/Sentiment/sentimentprediction?sentimentText={targetText}";

        float percentage = await Http.GetJsonAsync<float>(url);

        return percentage;
    }

    // Sample test without ML.NET model
    //
    //void UpdateScore(UIChangeEventArgs evt)
    //{
    //    string targetText = (string)evt.Value;

    //    //Random percentage
    //    Random random = new Random();
    //    happiness = random.Next(0, 100);
    //}
}
